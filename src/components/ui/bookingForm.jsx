"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { format } from "date-fns";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Calendar as CalendarIcon, Loader2 } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { useTheme } from "@/components/theme-provider";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useState } from "react";
import PropTypes from 'prop-types';
import { toast } from "react-hot-toast";
import api from "@/lib/api";
import { differenceInCalendarDays } from "date-fns";

const formSchema = z.object({
  booker_name: z.string().min(1),
  booker_email: z.string().min(1),
  booker_phone: z.string().min(1),
  address_line_1: z.string().min(1),
  address_line_2: z.string().min(1).optional(),
  city: z.string().min(1),
  postcode: z.string().min(1),
  country: z.string().min(1),
  booking_date: z.coerce.date(),
  lead_traveller_name: z.string().min(1),
  lead_traveller_phone: z.string().min(1),
  lead_traveller_email: z.string().min(1),
  guest_traveller_names: z.array(z.string().min(1)),
  acquisition: z.string(),
  booking_type: z.string(),
  atol_abtot: z.string(),
  payment1_date: z.coerce.date(),
  payment2_date: z.coerce.date(),
  payment3_date: z.coerce.date(),
});

const currencySymbols = {
  GBP: "£",
  USD: "$",
  EUR: "€",
  AUD: "A$",
  CAD: "C$",
};

function BookingForm({ 
  numberOfAdults, 
  totalPrice, 
  selectedCurrency,
  dateRange,
  onSubmit,
  selectedEvent,
  selectedPackage,
  selectedHotel,
  selectedRoom,
  selectedTicket,
  selectedFlight,
  selectedLoungePass,
  selectedCircuitTransfer,
  selectedAirportTransfer,
  ticketQuantity,
  roomQuantity,
  loungePassQuantity,
  circuitTransferQuantity,
  airportTransferQuantity,
  flightQuantity,
  flightPNR,
  ticketingDeadline,
  paymentStatus,
  originalNights,
  salesTeam
}) {
  const { theme } = useTheme();
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [alertType, setAlertType] = useState("error");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [bookingDetails, setBookingDetails] = useState(null);

  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      booking_date: new Date(),
      guest_traveller_names: Array(Math.max(0, numberOfAdults - 1)).fill(""),
    },
  });

  const handleSubmit = async (values) => {
    if (isSubmitting) return; // Prevent double submission

    try {
      setIsSubmitting(true);

      // Calculate payment amounts (assuming 3 equal payments)
      const paymentAmount = totalPrice / 3;

      // Format dates for the API
      const formatDate = (date) => {
        if (!date) return '';
        return format(new Date(date), "dd-LLL-y");
      };

      // Prepare the booking data according to API requirements
      const bookingData = {
        // Status and reference
        status: 'New',
        booking_ref: '', // This will be generated by the backend
        
        // Booking details
        booking_type: values.booking_type,
        consultant: salesTeam ? `${salesTeam.first_name} ${salesTeam.last_name}` : '',
        acquisition: values.acquisition,
        event_id: selectedEvent?.event_id || '',
        package_id: selectedPackage?.package_id || '',
        atol_abtot: values.atol_abtot,
        booking_date: formatDate(values.booking_date),
        
        // Booker details
        booker_name: values.booker_name,
        booker_email: values.booker_email,
        booker_phone: values.booker_phone,
        booker_address: [
          values.address_line_1,
          values.address_line_2,
          values.city,
          values.postcode,
          values.country
        ].filter(Boolean).join('\n'),
        
        // Lead traveller details
        lead_traveller_name: values.lead_traveller_name,
        lead_traveller_email: values.lead_traveller_email,
        lead_traveller_phone: values.lead_traveller_phone,
        guest_traveller_names: values.guest_traveller_names.join(', '),
        adults: numberOfAdults,
        
        // Ticket details
        ticket_id: selectedTicket?.ticket_id || '',
        ticket_quantity: ticketQuantity,
        ticket_price: selectedTicket ? selectedTicket.price * ticketQuantity : 0,
        
        // Hotel details
        hotel_id: selectedHotel?.hotel_id || '',
        room_id: selectedRoom?.room_id || '',
        check_in_date: dateRange?.from ? formatDate(dateRange.from) : '',
        check_out_date: dateRange?.to ? formatDate(dateRange.to) : '',
        nights: dateRange?.from && dateRange?.to ? 
          Math.ceil((dateRange.to - dateRange.from) / (1000 * 60 * 60 * 24)) : 0,
        extra_nights: dateRange?.from && dateRange?.to ? 
          Math.max(differenceInCalendarDays(dateRange.to, dateRange.from) - originalNights, 0) : 0,
        room_quantity: roomQuantity,
        room_price: selectedRoom ? 
          (Number(selectedRoom.price) + 
           (Math.max(differenceInCalendarDays(dateRange.to, dateRange.from) - originalNights, 0) * Number(selectedRoom.extra_night_price))) * 
          roomQuantity : 0,
        
        // Transfer details
        airport_transfer_id: selectedAirportTransfer?.airport_transfer_id || '',
        airport_transfer_quantity: airportTransferQuantity,
        airport_transfer_price: selectedAirportTransfer ? selectedAirportTransfer.price * airportTransferQuantity : 0,
        circuit_transfer_id: selectedCircuitTransfer?.circuit_transfer_id || '',
        circuit_transfer_quantity: circuitTransferQuantity,
        circuit_transfer_price: selectedCircuitTransfer ? selectedCircuitTransfer.price * circuitTransferQuantity : 0,
        
        // Flight details
        flight_id: selectedFlight?.flight_id || '',
        flight_booking_reference: flightPNR || '',
        ticketing_deadline: formatDate(ticketingDeadline),
        flight_status: paymentStatus || '',
        flight_quantity: selectedFlight ? flightQuantity : 0,
        flight_price: selectedFlight ? selectedFlight.price * flightQuantity : 0,
        
        // Lounge pass details
        lounge_pass_id: selectedLoungePass?.lounge_pass_id || '',
        lounge_pass_quantity: loungePassQuantity,
        lounge_pass_price: selectedLoungePass ? selectedLoungePass.price * loungePassQuantity : 0,
        
        // Payment details
        payment_currency: selectedCurrency,
        payment_1: paymentAmount,
        payment_1_date: formatDate(values.payment1_date),
        payment_2: paymentAmount,
        payment_2_date: formatDate(values.payment2_date),
        payment_3: paymentAmount,
        payment_3_date: formatDate(values.payment3_date),
        
        // Calculated totals
        'Total cost': totalPrice,
        'Total Sold For Local': totalPrice,
        'Total Sold GBP': totalPrice,
        'P&L': 0 // This will be calculated by the backend
      };

      // Log the data being sent
      console.log('Sending booking data:', bookingData);

      // Make the API request to the correct endpoint
      console.log('Making API request to /bookingFile');
      try {
        const response = await api.post('/bookingFile', bookingData);
        console.log('API Response:', response);
        
        if (response.data) {
          console.log('Response data:', response.data);
          console.log('Response status:', response.status);
          console.log('Response headers:', response.headers);
          
          // Set booking details for confirmation dialog
          setBookingDetails({
            bookingRef: response.data.booking_ref || 'Pending',
            bookerName: values.booker_name,
            event: selectedEvent?.event || 'N/A',
            package: selectedPackage?.package_name || 'N/A',
            totalPrice: `${currencySymbols[selectedCurrency]}${totalPrice.toFixed(2)}`,
            paymentSchedule: [
              { amount: paymentAmount, date: formatDate(values.payment1_date) },
              { amount: paymentAmount, date: formatDate(values.payment2_date) },
              { amount: paymentAmount, date: formatDate(values.payment3_date) }
            ]
          });
          
          // Show confirmation dialog
          setShowConfirmation(true);
        }
        
        // Show success message
        toast.success('Booking created successfully!');
        
      } catch (error) {
        console.error('Failed to create booking:', error);
        
        // Log the error response data if available
        if (error.response) {
          console.error('Error response:', {
            status: error.response.status,
            statusText: error.response.statusText,
            data: error.response.data,
            headers: error.response.headers
          });
        }
        
        // Show more specific error message
        const errorMessage = error.response?.data?.message || 'Failed to create booking. Please try again.';
        toast.error(errorMessage);
      } finally {
        setIsSubmitting(false);
      }
    } catch (error) {
      console.error('Failed to create booking:', error);
      
      // Log the error response data if available
      if (error.response?.data) {
        console.error('Server error response:', error.response.data);
      }
      
      // Show more specific error message
      const errorMessage = error.response?.data?.message || 'Failed to create booking. Please try again.';
      toast.error(errorMessage);
    }
  };

  return (
    <Form {...form}>
      <div className="w-8/12 max-w-6xl mx-auto">
        <form
          onSubmit={form.handleSubmit(handleSubmit)}
          className="p-4 space-y-4 bg-card rounded-md border-[1px] border shadow-sm w-full max-w-6xl mx-auto"
        >
          {/* Booker Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="booker_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Booker Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter booker's name" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="booker_email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Booker Email</FormLabel>
                  <FormControl>
                    <Input
                      type="email"
                      placeholder="Enter booker's email"
                      {...field}
                      className="bg-background"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="booker_phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Booker Phone</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter booker's phone" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {/* Address Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border-t border-border pt-4">
            <FormField
              control={form.control}
              name="address_line_1"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Address Line 1</FormLabel>
                  <FormControl>
                    <Input placeholder="Address Line 1" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="address_line_2"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Address Line 2</FormLabel>
                  <FormControl>
                    <Input placeholder="Optional Address Line 2" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="city"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">City</FormLabel>
                  <FormControl>
                    <Input placeholder="City" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postcode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Postcode</FormLabel>
                  <FormControl>
                    <Input placeholder="Postcode" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="country"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Country</FormLabel>
                  <FormControl>
                    <Input placeholder="Country" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {/* Traveller Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border-t border-border pt-4">
            <FormField
              control={form.control}
              name="lead_traveller_name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Lead Traveller Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Lead Traveller" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="lead_traveller_phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Lead Traveller Phone</FormLabel>
                  <FormControl>
                    <Input placeholder="Phone Number" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="lead_traveller_email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Lead Traveller Email</FormLabel>
                  <FormControl>
                    <Input placeholder="Email Address" {...field} className="bg-background" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border-t border-border pt-4">
            {Array.from({ length: Math.max(0, numberOfAdults - 1) }).map(
              (_, index) => (
                <FormField
                  key={index}
                  control={form.control}
                  name={`guest_traveller_names.${index}`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-foreground">Guest Traveller {index + 1} Name</FormLabel>
                      <FormControl>
                        <Input
                          placeholder={`Guest Traveller ${index + 1}`}
                          {...field}
                          className="bg-background"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )
            )}
          </div>
          {/* Booking Info */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 border-t border-border pt-4">
            <FormField
              control={form.control}
              name="booking_date"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Booking Date</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant="outline"
                          className={cn(
                            "w-full justify-start text-left font-normal bg-background",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          {field.value ? (
                            format(field.value, "PPP")
                          ) : (
                            <span>Pick a date</span>
                          )}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="acquisition"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Acquisition</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger className="w-full bg-background">
                        <SelectValue placeholder="Acquisition source" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="referral">Referral</SelectItem>
                      <SelectItem value="newsletter">Newsletter</SelectItem>
                      <SelectItem value="unknown">Unknown</SelectItem>
                      <SelectItem value="meta">Meta</SelectItem>
                      <SelectItem value="repeat">Repeat</SelectItem>
                      <SelectItem value="organic">Organic</SelectItem>
                      <SelectItem value="b2b">B2B (Travel agent)</SelectItem>
                      <SelectItem value="adwords">Adwords</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="booking_type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">Booking Type</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger className="w-full bg-background">
                        <SelectValue placeholder="Booking type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="actual">Actual</SelectItem>
                      <SelectItem value="provisional">Provisional</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="atol_abtot"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-foreground">ATOL/ABTOT</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger className="w-full bg-background">
                        <SelectValue placeholder="ATOL/ABTOT" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="abtot">ABTOT</SelectItem>
                      <SelectItem value="atol">ATOL (Package)</SelectItem>
                      <SelectItem value="na">N/A (Non EU)</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          {/* Payment Info */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 border-t border-border pt-4">
            {/* Deposit Payment */}
            <div className="space-y-2">
              <FormLabel className="text-foreground">Deposit Payment</FormLabel>
              <div className="text-sm font-semibold text-foreground">
                {currencySymbols[selectedCurrency] || "£"}{(totalPrice / 3).toFixed(2)}
              </div>
              <FormField
                control={form.control}
                name="payment1_date"
                render={({ field }) => (
                  <FormItem>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full justify-start text-left font-normal bg-background",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormItem>
                )}
              />
            </div>

            {/* Payment 2 */}
            <div className="space-y-2">
              <FormLabel className="text-foreground">Payment 2</FormLabel>
              <div className="text-sm font-semibold text-foreground">
                {currencySymbols[selectedCurrency] || "£"}{(totalPrice / 3).toFixed(2)}
              </div>
              <FormField
                control={form.control}
                name="payment2_date"
                render={({ field }) => (
                  <FormItem>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full justify-start text-left font-normal bg-background",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormItem>
                )}
              />
            </div>

            {/* Final Payment */}
            <div className="space-y-2">
              <FormLabel className="text-foreground">Final Payment</FormLabel>
              <div className="text-sm font-semibold text-foreground">
                {currencySymbols[selectedCurrency] || "£"}{(totalPrice / 3).toFixed(2)}
              </div>
              <FormField
                control={form.control}
                name="payment3_date"
                render={({ field }) => (
                  <FormItem>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full justify-start text-left font-normal bg-background",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormItem>
                )}
              />
            </div>
          </div>

          <div className="pt-4">
            <Button 
              type="submit" 
              size="lg" 
              className="w-full"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Submitting...
                </>
              ) : (
                "Submit Booking"
              )}
            </Button>
          </div>
        </form>
      </div>

      {/* Booking Confirmation Dialog */}
      <AlertDialog open={showConfirmation} onOpenChange={setShowConfirmation}>
        <AlertDialogContent className="sm:max-w-[600px]">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-2xl font-bold">Booking Confirmation</AlertDialogTitle>
            <AlertDialogDescription className="space-y-4">
              {bookingDetails && (
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="font-semibold">Booking Reference:</p>
                      <p>{bookingDetails.bookingRef}</p>
                    </div>
                    <div>
                      <p className="font-semibold">Booker Name:</p>
                      <p>{bookingDetails.bookerName}</p>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="font-semibold">Event:</p>
                      <p>{bookingDetails.event}</p>
                    </div>
                    <div>
                      <p className="font-semibold">Package:</p>
                      <p>{bookingDetails.package}</p>
                    </div>
                  </div>
                  <div>
                    <p className="font-semibold">Total Price:</p>
                    <p className="text-xl font-bold">{bookingDetails.totalPrice}</p>
                  </div>
                  <div>
                    <p className="font-semibold mb-2">Payment Schedule:</p>
                    <div className="space-y-2">
                      {bookingDetails.paymentSchedule.map((payment, index) => (
                        <div key={index} className="flex justify-between items-center">
                          <span>Payment {index + 1}:</span>
                          <span className="font-medium">
                            {currencySymbols[selectedCurrency]}{payment.amount.toFixed(2)} due {payment.date}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogAction onClick={() => {
              setShowConfirmation(false);
              // Reset form or navigate away if needed
            }}>
              Close
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Error Alert Dialog */}
      <AlertDialog open={showAlert} onOpenChange={setShowAlert}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              {alertType === "success" ? "Success" : "Error"}
            </AlertDialogTitle>
            <AlertDialogDescription>
              {alertMessage}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogAction onClick={() => setShowAlert(false)}>
              OK
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </Form>
  );
}

BookingForm.propTypes = {
  numberOfAdults: PropTypes.number.isRequired,
  totalPrice: PropTypes.number.isRequired,
  selectedCurrency: PropTypes.string.isRequired,
  dateRange: PropTypes.shape({
    from: PropTypes.instanceOf(Date),
    to: PropTypes.instanceOf(Date)
  }),
  onSubmit: PropTypes.func.isRequired,
  selectedEvent: PropTypes.object,
  selectedPackage: PropTypes.object,
  selectedHotel: PropTypes.object,
  selectedRoom: PropTypes.object,
  selectedTicket: PropTypes.object,
  selectedFlight: PropTypes.object,
  selectedLoungePass: PropTypes.object,
  selectedCircuitTransfer: PropTypes.object,
  selectedAirportTransfer: PropTypes.object,
  ticketQuantity: PropTypes.number,
  roomQuantity: PropTypes.number,
  loungePassQuantity: PropTypes.number,
  circuitTransferQuantity: PropTypes.number,
  airportTransferQuantity: PropTypes.number,
  flightQuantity: PropTypes.number,
  flightPNR: PropTypes.string,
  ticketingDeadline: PropTypes.instanceOf(Date),
  paymentStatus: PropTypes.string,
  originalNights: PropTypes.number,
  salesTeam: PropTypes.object
};

export { BookingForm };
